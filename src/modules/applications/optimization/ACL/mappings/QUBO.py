#  Copyright 2021 The QUARK Authors. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

from typing import TypedDict

import pulp
from qiskit_optimization import QuadraticProgram
import numpy as np
from qiskit.opflow import PauliSumOp
from qiskit_optimization.converters import InequalityToEquality, IntegerToBinary, QuadraticProgramToQubo, LinearEqualityToPenalty

from modules.applications.Mapping import *
from utils import start_time_measurement, end_time_measurement


class QUBO(Mapping):
    """
    QUBO formulation for the TSP.

    """

    def __init__(self):
        """
        Constructor method
        """
        super().__init__()
        self.submodule_options = ["Annealer"]

    @staticmethod
    def get_requirements() -> list[dict]:
        """
        Return requirements of this module

        :return: list of dict with requirements of this module
        :rtype: list[dict]
        """
        return [
            {
                "name": "pulp",
                "version": "2.7.0"
            }
        ]

    def get_parameter_options(self):
        """
        Returns empty dict as this mapping has no configurable settings.

        :return: empty dict
        :rtype: dict
        """
        return {
        }

    class Config(TypedDict):
        """
        Empty config as this solver has no configurable settings.
        """
        pass

    def map_pulp_to_qiskit(self, problem: any):
        # Details at:
        # https://coin-or.github.io/pulp/guides/how_to_export_models.html
        # https://qiskit.org/documentation/stable/0.26/tutorials/optimization/2_converters_for_quadratic_programs.html
        qp = QuadraticProgram()

        # Variables
        for variable_dict in problem["variables"]:
            if variable_dict["cat"] == "Integer":
                lb = variable_dict["lowBound"]
                ub = variable_dict["upBound"]
                name = variable_dict["name"]
                # If the integer variable is actually a binary variable
                if lb == 0 and ub == 1:
                    qp.binary_var(name)
                # If the integer variable is non-binary
                else:
                    qp.integer_var(lowerbound=lb, upperbound=ub, name=name)
                # Todo: Linear variables

        # Objective function
        # Arguments:
        obj_arguments = {}
        for arg in problem["objective"]["coefficients"]:
            obj_arguments[arg["name"]] = arg["value"]

        # Maximize
        if problem["parameters"]["sense"] == -1:
            qp.maximize(linear=obj_arguments)
        # Minimize
        else:
            qp.minimize(linear=obj_arguments)

        # Constraints
        for constraint in problem["constraints"]:
            const_arguments = {}
            for arg in constraint["coefficients"]:
                const_arguments[arg["name"]] = arg["value"]
            sense = constraint["sense"]
            if sense == -1:
                const_sense = "LE"
            elif sense == 1:
                const_sense = "GE"
            else:
                const_sense = "E"
            qp.linear_constraint(linear=const_arguments, sense=const_sense, rhs=-1 * constraint["constant"],
                                 name=constraint["name"])
        return qp

    def map(self, problem: any, config: Config) -> (dict, float):
        """
        Maps the LP to a QUBO formulation.

        :param problem: problem
        :type problem: any
        :param config: config with the parameters specified in Config class
        :type config: Config
        :return: dict with QUBO, time it took to map it
        :rtype: tuple(dict, float)
        """
        start = start_time_measurement()

        # Map Linear problem from dictionary (generated by pulp) to quadratic program
        qp = self.map_pulp_to_qiskit(problem)

        # Convert inequality constraints to equality constraints
        # Convert integer to binary variables:
        # Convert to penalty
        conv = QuadraticProgramToQubo()
        qubo = conv.convert(qp)

        ising_ham, offset = qubo.to_ising()
        print(ising_ham)

        #matrix = ising_ham.to_matrix()
        #qubo_matrix = np.triu(matrix)
        #print(matrix)
        #print(type(matrix))

        #num_rows, num_cols = qubo_matrix.shape
        #print(num_rows, num_cols)

        return {"Q": qubo}, end_time_measurement(start)

    def get_default_submodule(self, option: str) -> Core:

        if option == "Annealer":
            from modules.solvers.Annealer import Annealer  # pylint: disable=C0415
            return Annealer()
        else:
            raise NotImplementedError(f"Solver Option {option} not implemented")
